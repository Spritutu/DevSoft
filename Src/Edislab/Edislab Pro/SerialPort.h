#ifndef BASHLIB_H
#define BASHLIB_H
#include <Windows.h>

//串口属性结构体定义
typedef struct _comproperty
{
	//波特率
	unsigned int nBaudRate;
	//通信字节位数
	int nDataBits;
	//停止位(0:1个停止位 1:1.5个停止位(Linux暂不支持1.5个停止位) 2:2个停止位)
	int nStopBits;
	//校验类型(0:不使用校验  1:奇数校验 2:偶数校验 3:标记校验（Linux下没有此项） 4:空格校验)
	int nPairty;
	//流控制(0:不使用流控 1:使用硬件流控)
	int nFlowControl;


	_comproperty()
	{
		nBaudRate = 115200;
		nDataBits = 8;
		nStopBits = 0;
		nPairty = 0;
		nFlowControl = 0;
	}
}COMPROPERTY,*LPCOMPROPERTY;

//操作COM口的类
class CHandleCom
{
public:
	CHandleCom(void);
	virtual ~CHandleCom(void);
	//必须实现的虚函数
public:
	/*****************************************************************************************************************************************
	函数名称:Open
	功能描述:打开COM口
	输入参数:szName:要打开的串口名称
	输出参数:无
	返回值:true:成功 false:失败
	*****************************************************************************************************************************************/
	bool Open(const char* szName);
	/*****************************************************************************************************************************************
	函数名称:Close
	功能描述:关闭COM口
	输入参数:无
	输出参数:无
	返回值:true:成功 false:失败
	*****************************************************************************************************************************************/
	void Close(void);
	/*****************************************************************************************************************************************
	函数名称:Write
	功能描述:向串口写入数据
	输入参数:pData:要写入的内容 nDataLen:写入内容的长度 
	输出参数:uWriteLen:实际写入的内容的长度
	返回值:true:成功 false:失败
	*****************************************************************************************************************************************/
    bool Write(void* pData,unsigned int nDataLen,unsigned int& uWriteLen);
	/*****************************************************************************************************************************************
	函数名称:Read
	功能描述:从串口读取数据
	输入参数:pData:存放读取内容的缓冲区 nDataLen:要读取的字节数
	输出参数:uReadLen:实际读取的内容的长度
	返回值:true:成功 false:失败
	*****************************************************************************************************************************************/
	bool Read(void* pData,unsigned int nDataLen,unsigned int& uReadLen);
public:
	/*****************************************************************************************************************************************
	函数名称:IsOpen
	功能描述:判断COM是否已经打开
	输入参数:无
	输出参数:无
	返回值:true:已经打开 false:没有打开
	*****************************************************************************************************************************************/
	bool IsOpen(void);
	/*****************************************************************************************************************************************
	函数名称:GetComProperty
	功能描述:获取打开串口的当前属性
	输入参数:无
	输出参数:pProperty:保存串口的属性
	返回值:true:获取成功 false:获取失败
	*****************************************************************************************************************************************/
	bool GetComProperty(LPCOMPROPERTY pProperty);
	/****************************************************************************************************************************************
	函数名称:SetComProperty
	功能描述:设置打开串口的当前属性
	输入参数:pProperty:设置串口的属性
	输出参数:无
	返回值:true:设置成功 false:设置失败
	*****************************************************************************************************************************************/
	bool SetComProperty(LPCOMPROPERTY pProperty);
	/****************************************************************************************************************************************
	函数名称:SetTimeout
	功能描述:设置串口的读写操作时间
	输入参数:nMillSeconds:超时时间，单位是毫秒
	输出参数:无
	返回值:true:设置成功 false:设置失败
	*****************************************************************************************************************************************/
	bool SetTimeout(unsigned int nMillSeconds);

	void ResetSendBuffer(void);
	void ResetRecvBuffer(void);
private:
	HANDLE m_handle;
	COMPROPERTY m_comproperty;
};

#endif